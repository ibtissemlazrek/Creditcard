{"version":3,"sources":["images/Capture.PNG","images/Capture1.PNG","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeNumber","event","target","value","length","isNaN","setState","number","changeName","test","name","changeDate","date","state","react_default","a","createElement","className","src","capture","padEnd","split","map","x","i","substring","slice","width","height","image","toUpperCase","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55c80587.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Capture.0bdad866.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Capture1.10110331.PNG\";","import React, { Component } from 'react';\nimport './App.css';\nimport capture from './images/Capture.PNG'\nimport image from './images/Capture1.PNG'\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      number:\"\",\n      name:\"\",\n      date:\"\"\n\n    }\n  }\n  changeNumber=(event)=>{\n    if((event.target.value.length<17) && (!isNaN(event.target.value)) ){\n    this.setState({   \n    number:event.target.value\n })\n  } \n  }\n  changeName=(event)=>{\n    if(event.target.value.length<21 && ! /[0-9]/g.test(event.target.value)){\n    this.setState({\n      name:event.target.value\n    }) \n  }\n  }\n    changeDate=(event)=>{\n      if((event.target.value.length<5)&&(!isNaN(event.target.value))){\n      this.setState({\n        date:event.target.value\n      })\n    }\n    }\n  render() {\n    return (<div className=\"main\">\n      <div className=\"app\">\n        <div className=\"app-intro\">\n          <h1 className=\"app-title\"> CREDIT CARD</h1>\n        </div>\n\n        <div className=\"app-logo\">\n          <img className=\"logo\" src={capture} />\n        </div>\n        <div className=\"app-container\">\n          <div className=\"app-number\">\n            <p className=\"app-serie\">{this.state.number.padEnd(16,'*').split('').map((x,i)=>{return i%4==0?' '+x:x})  }</p>\n\n            <div className=\"rese\">\n              <div className=\"app-num\">\n                <p className=\"num\"> 5422</p>\n\n                <div className=\"app-date\">\n                  <div className=\"valid\">\n                  </div>\n                  <div className=\"month\">\n                    <div className=\"validation\">\n                      <p className=\"para\">VALID</p>\n                      <p className=\"para\">THRU</p>\n                    </div>\n                    <div className=\"years\"><p className=\"para\">\n                      <span className=\"months\">MONTH/YEAR</span></p>\n                      <p className=\"num\"> {this.state.date.substring(0,2).padEnd(2,'*')+\"/\"+this.state.date.slice(2,4).padEnd(2,'*')}</p> </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"logo\"> <img width='100px' height='100px' className=\"log\" src={image} /></div>\n\n            </div>\n            <p className=\"txt\"> {this.state.name.padEnd(20,'*').toUpperCase()}</p>\n\n          </div>\n        </div>\n\n      </div>\n      <div className=\"users\">\n        <input type=\"text\" className=\"input\" placeholder=\" CARD NUMBER\" value={this.state.number} onChange={this.changeNumber}/>\n        <input type=\"text\" className=\"input\" placeholder=\" YOUR NAME\"  value={this.state.name}  onChange={this.changeName}/>\n        <input type=\"text\" className=\"input\" placeholder=\" XX/YY\"  value={this.state.date} onChange={this.changeDate}/>\n\n      </div>\n    </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}